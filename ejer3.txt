#include <iostream>
#include <list>

template<typename T>
void partir(std::list<T> &lista_origen, T pivote, std::list<T>& izquierda, std::list<T>& derecha){
    lista_origen.sort();
    typename std::list<T>::iterator t1;
    for(auto it = lista_origen.begin(); it != lista_origen.end(); it++){
        if(*it == pivote){
            t1 = it;
        }
    }
    izquierda.splice(izquierda.begin(),lista_origen, lista_origen.begin(), t1);
    derecha.splice(derecha.begin(),lista_origen);
}

template<typename M>
void print(std::list<M> l){
    for(auto it : l)
        std::cout << it<< " ";
}

template<typename M>
void ordenar(std::list<M> &lista){
    std::list<M> l1;
    std::list<M> l2;
    partir(lista,*(lista.begin()),l1,l2);
    l1.merge(l2);
    lista = l1;
}

int main() {
    std::list<int> l{3,4,15,2,6,7,8,0,10};
    /*std::list<int>izquierda;
    std::list<int>derecha;
    partir(l,6,izquierda,derecha);
    print(izquierda);
    std::cout << std::endl;
    print(derecha);*/
    ordenar(l);
    return 0;
}
